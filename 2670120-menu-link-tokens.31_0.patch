diff --git a/src/Tests/TokenMenuTest.php b/src/Tests/TokenMenuTest.php
index 5e1f874..2077a34 100644
--- a/src/Tests/TokenMenuTest.php
+++ b/src/Tests/TokenMenuTest.php
@@ -19,6 +19,8 @@ class TokenMenuTest extends TokenTestBase {
   public static $modules = ['menu_ui', 'node'];
 
   function testMenuTokens() {
+    // Make sure we have a body field on the node type.
+    $this->drupalCreateContentType(['type' => 'page']);
     // Add a menu.
     $menu = entity_create('menu', array(
       'id' => 'main-menu',
@@ -118,5 +120,112 @@ class TokenMenuTest extends TokenTestBase {
     // Regression test for http://drupal.org/node/1317926 to ensure the
     // original node object is not changed when calling menu_node_prepare().
     $this->assertTrue(!isset($loaded_node->menu), t('The $node->menu property was not modified during token replacement.'), 'Regression');
+
+    // Now add a node with a menu-link from the UI and ensure it works.
+    $this->drupalLogin($this->drupalCreateUser([
+      'create page content',
+      'edit any page content',
+      'administer menu',
+      'administer nodes',
+      'administer content types',
+      'access administration pages',
+    ]));
+    // Setup node type menu options.
+    $edit = array(
+      'menu_options[main-menu]' => 1,
+      'menu_options[main]' => 1,
+      'menu_parent' => 'main-menu:',
+    );
+    $this->drupalPostForm('admin/structure/types/manage/page', $edit, t('Save content type'));
+
+    // Use a menu-link token in the body.
+    $this->drupalGet('node/add/page');
+    $this->drupalPostForm(NULL, [
+      // This should get replaced on save.
+      // @see token_module_test_node_presave()
+      'title[0][value]' => 'Node menu title test',
+      'body[0][value]' => 'This is a [node:menu-link:title] token to the menu link title',
+      'menu[enabled]' => 1,
+      'menu[title]' => 'Test preview',
+    ], t('Save and publish'));
+    $node = $this->drupalGetNodeByTitle('Node menu title test');
+    $this->assertEqual('This is a Test preview token to the menu link title', $node->body->value);
+
+    // Now test a parent link and token.
+    $this->drupalGet('node/add/page');
+    // Make sure that the previous node save didn't result in two menu-links
+    // being created by the computed menu-link ER field.
+    // @see token_entity_base_field_info()
+    // @see token_node_menu_link_submit()
+    $selects = $this->cssSelect('select[name="menu[menu_parent]"]');
+    $select = reset($selects);
+    $options = $this->getAllOptions($select);
+    // Filter to items with title containing 'Test preview'.
+    $options = array_filter($options, function(\SimpleXMLElement $item) {
+      return strpos((string) $item[0], 'Test preview') !== FALSE;
+    });
+    $this->assertEqual(1, count($options));
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Node menu title parent path test',
+      'body[0][value]' => 'This is a [node:menu-link:parent:url:path] token to the menu link parent',
+      'menu[enabled]' => 1,
+      'menu[title]' => 'Child link',
+      'menu[menu_parent]' => 'main-menu:' .  $parent_link->getPluginId(),
+    ], t('Save and publish'));
+    $node = $this->drupalGetNodeByTitle('Node menu title parent path test');
+    $this->assertEqual('This is a /admin/config token to the menu link parent', $node->body->value);
+
+    // Now edit the node and update the parent and title.
+    $this->drupalPostForm('node/' . $node->id() . '/edit', [
+      'menu[menu_parent]' => 'main-menu:' .  $node_link->getPluginId(),
+      'title[0][value]' => 'Node menu title edit parent path test',
+      'body[0][value]' => 'This is a [node:menu-link:parent:url:path] token to the menu link parent',
+    ], t('Save and keep published'));
+    $node = $this->drupalGetNodeByTitle('Node menu title edit parent path test', TRUE);
+    $this->assertEqual(sprintf('This is a /node/%d token to the menu link parent', $loaded_node->id()), $node->body->value);
+
+    // Make sure that the previous node edit didn't result in two menu-links
+    // being created by the computed menu-link ER field.
+    // @see token_entity_base_field_info()
+    // @see token_node_menu_link_submit()
+    $this->drupalGet('node/add/page');
+    $selects = $this->cssSelect('select[name="menu[menu_parent]"]');
+    $select = reset($selects);
+    $options = $this->getAllOptions($select);
+    // Filter to items with title containing 'Test preview'.
+    $options = array_filter($options, function(\SimpleXMLElement $item) {
+      return strpos((string) $item[0], 'Child link') !== FALSE;
+    });
+    $this->assertEqual(1, count($options));
+
+    // Now add a new node with no menu.
+    $this->drupalGet('node/add/page');
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Node menu adding menu later test',
+      'body[0][value]' => 'Going to add a menu link on edit',
+      'menu[enabled]' => 0,
+    ], t('Save and publish'));
+    $node = $this->drupalGetNodeByTitle('Node menu adding menu later test');
+    // Now edit it and add a menu item.
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Node menu adding menu later test',
+      'body[0][value]' => 'This is a [node:menu-link:parent:url:path] token to the menu link parent',
+      'menu[enabled]' => 1,
+      'menu[title]' => 'Child link',
+      'menu[menu_parent]' => 'main-menu:' .  $parent_link->getPluginId(),
+    ], t('Save and keep published'));
+    $node = $this->drupalGetNodeByTitle('Node menu adding menu later test', TRUE);
+    $this->assertEqual('This is a /admin/config token to the menu link parent', $node->body->value);
+    // And make sure the menu link exists with the right URI.
+    $link = menu_ui_get_menu_link_defaults($node);
+    $this->assertTrue(!empty($link['entity_id']));
+    $query = \Drupal::entityQuery('menu_link_content')
+      ->condition('link.uri', 'entity:node/' . $node->id())
+      ->sort('id', 'ASC')
+      ->range(0, 1);
+    $result = $query->execute();
+    $this->assertTrue($result);
   }
+
 }
diff --git a/tests/modules/token_module_test/token_module_test.module b/tests/modules/token_module_test/token_module_test.module
index b907534..c263320 100644
--- a/tests/modules/token_module_test/token_module_test.module
+++ b/tests/modules/token_module_test/token_module_test.module
@@ -4,6 +4,7 @@
  * @file
  * Helper module for token tests.
  */
+use Drupal\node\NodeInterface;
 
 /**
  * Implements hook_page_attachments().
@@ -17,3 +18,15 @@ function token_module_test_page_attachments() {
     \Drupal::state()->set('token_page_tokens', $debug);
   }
 }
+
+/**
+ * Implements hook_ENTITY_TYPE_presave for Node entities.
+ */
+function token_module_test_node_presave(NodeInterface $node) {
+  // Transform tokens in the body.
+  // @see \Drupal\token\Tests\TokenMenuTest::testMenuTokens()
+  if ($node->hasField('body')) {
+    $node->body->value = \Drupal::token()
+      ->replace($node->body->value, ['node' => $node]);
+  }
+}
diff --git a/token.module b/token.module
index 1078cca..e9291cd 100644
--- a/token.module
+++ b/token.module
@@ -11,6 +11,10 @@ use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\menu_link_content\Entity\MenuLinkContent;
+use Drupal\node\NodeInterface;
 
 /**
  * Implements hook_help().
@@ -157,7 +161,7 @@ function token_clear_cache() {
  */
 function token_entity_type_alter(array &$entity_types) {
   $devel_exists = \Drupal::moduleHandler()->moduleExists('devel');
-  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
+  /* @var $entity_types EntityTypeInterface[] */
   foreach ($entity_types as $entity_type_id => $entity_type) {
     if (!$entity_type->get('token_type')) {
       // Fill in default token types for entities.
@@ -632,4 +636,117 @@ function token_element_children(&$elements, $sort = FALSE) {
   }
 
   return array_keys($children);
-}
\ No newline at end of file
+}
+
+/**
+ * Implements hook_entity_base_field_info().
+ */
+function token_entity_base_field_info(EntityTypeInterface $entity_type) {
+  // We add a psuedo entity-reference field to track the menu entry created
+  // from the node add/edit form so that tokens generated at that time that
+  // reference the menu link can access the yet to be saved menu link.
+  // @todo Revisit when https://www.drupal.org/node/2315773 is resolved.
+  if ($entity_type->id() === 'node' && \Drupal::moduleHandler()->moduleExists('menu_ui')) {
+    $fields['menu_link'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Menu link'))
+      ->setDescription(t('Computed menu link for the node (only available during node saving).'))
+      ->setRevisionable(TRUE)
+      ->setSetting('target_type', 'menu_link_content')
+      ->setTranslatable(TRUE)
+      ->setDisplayOptions('view', array(
+        'label' => 'hidden',
+        'type' => 'hidden',
+      ))
+      ->setComputed(TRUE)
+      ->setDisplayOptions('form', array(
+        'type' => 'hidden',
+      ));
+
+    return $fields;
+  }
+  return [];
+}
+
+/**
+ * Implements hook_form_BASE_FORM_ID_alter() for node_form.
+ *
+ * Populates menu_link field on nodes from the menu item on unsaved nodes.
+ *
+ * @see menu_ui_form_node_form_submit()
+ * @see token_entity_base_field_info()
+ */
+function token_form_node_form_alter(&$form, FormStateInterface $form_state) {
+  if (!\Drupal::moduleHandler()->moduleExists('menu_ui')) {
+    return;
+  }
+  /** @var \Drupal\node\NodeForm $form_object */
+  if (!\Drupal::currentUser()->hasPermission('administer menu')) {
+    // We're only interested in when the node is unsaved and the editor has
+    // permission to create new menu links.
+    return;
+  }
+  $form['#entity_builders'][] = 'token_node_menu_link_submit';
+}
+
+/**
+ * Entity builder.
+ */
+function token_node_menu_link_submit($entity_type, NodeInterface $node, &$form, FormStateInterface $form_state) {
+  // Entity builders run twice, once during validation and again during
+  // submission, so we only run this code after validation has been performed.
+  if (!$form_state->isValueEmpty('menu') && $form_state->getTemporaryValue('entity_validated')) {
+    $values = $form_state->getValue('menu');
+    if (!empty($values['enabled']) && trim($values['title'])) {
+      if (!empty($values['menu_parent'])) {
+        list($menu_name, $parent) = explode(':', $values['menu_parent'], 2);
+        $values['menu_name'] = $menu_name;
+        $values['parent'] = $parent;
+      }
+      // Construct an unsaved entity.
+      if ($entity_id = $form_state->getValue(['menu', 'entity_id'])) {
+        // Use the existing menu_link_content entity.
+        $entity = MenuLinkContent::load($entity_id);
+      }
+      else {
+        if ($node->isNew()) {
+          // Create a new menu_link_content entity.
+          $entity = MenuLinkContent::create(array(
+            // Lets just reference the UUID for now, the link is not important for
+            // token generation.
+            'link' => ['uri' => 'internal:/node/' . $node->uuid()],
+            'langcode' => $node->language()->getId(),
+          ));
+        }
+        else {
+          // Create a new menu_link_content entity.
+          $entity = MenuLinkContent::create(array(
+            'link' => ['uri' => 'entity:node/' . $node->id()],
+            'langcode' => $node->language()->getId(),
+          ));
+        }
+      }
+      $entity->enabled->value = 1;
+      $entity->title->value = trim($values['title']);
+      $entity->description->value = trim($values['description']);
+      $entity->menu_name->value = $values['menu_name'];
+      $entity->parent->value = $values['parent'];
+      $entity->weight->value = isset($values['weight']) ? $values['weight'] : 0;
+      $entity->save();
+      $node->menu_link = $entity;
+      // Leave this for _menu_ui_node_save() to pick up so we don't end up with
+      // duplicate menu-links.
+      $form_state->setValue(['menu', 'entity_id'], $entity->id());
+    }
+  }
+}
+
+/**
+ * Implements hook_ENTITY_TYPE_insert for node entities.
+ */
+function token_node_insert(NodeInterface $node) {
+  if ($node->hasField('menu_link') && $menu_link = $node->menu_link->entity) {
+    // Update the menu-link to point to the now saved node.
+    $menu_link->link = 'entity:node/' .  $node->id();
+    $menu_link->save();
+  }
+}
diff --git a/token.tokens.inc b/token.tokens.inc
index 60125dc..75f486b 100644
--- a/token.tokens.inc
+++ b/token.tokens.inc
@@ -1060,20 +1060,35 @@ function menu_ui_tokens($type, $tokens, array $data = array(), array $options =
     foreach ($tokens as $name => $original) {
       switch ($name) {
         case 'menu-link':
-          $url = $node->urlInfo();
-          if ($links = $menu_link_manager->loadLinksByRoute($url->getRouteName(), $url->getRouteParameters())) {
-            $link = reset($links);
-            $replacements[$original] = $link->getTitle();
+          // On node-form save we populate a calculated field with a menu_link
+          // references.
+          // @see token_node_menu_link_submit()
+          if ($node->getFieldDefinition('menu_link') && $menu_link = $node->menu_link->entity) {
+            /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
+            $replacements[$original] = $menu_link->getTitle();
+          }
+          else {
+            $url = $node->urlInfo();
+            if ($links = $menu_link_manager->loadLinksByRoute($url->getRouteName(), $url->getRouteParameters())) {
+              $link = reset($links);
+              $replacements[$original] = $link->getTitle();
+            }
           }
           break;
       }
 
       // Chained token relationships.
       if ($menu_tokens = \Drupal::token()->findWithPrefix($tokens, 'menu-link')) {
-        $url = $node->urlInfo();
-        if ($links = $menu_link_manager->loadLinksByRoute($url->getRouteName(), $url->getRouteParameters())) {
-          $link = reset($links);
-          $replacements += \Drupal::token()->generate('menu-link', $menu_tokens, array('menu-link' => $link), $options, $bubbleable_metadata);
+        if ($node->getFieldDefinition('menu_link') && $menu_link = $node->menu_link->entity) {
+          /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
+          $replacements += \Drupal::token()->generate('menu-link', $menu_tokens, array('menu-link' => $menu_link), $options, $bubbleable_metadata);
+        }
+        else {
+          $url = $node->urlInfo();
+          if ($links = $menu_link_manager->loadLinksByRoute($url->getRouteName(), $url->getRouteParameters())) {
+            $link = reset($links);
+            $replacements += \Drupal::token()->generate('menu-link', $menu_tokens, array('menu-link' => $link), $options, $bubbleable_metadata);
+          }
         }
       }
     }
